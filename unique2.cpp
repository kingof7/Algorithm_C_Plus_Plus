#include<bits/stdc++.h> // 1. C++ 표준 라이브러리의 모든 헤더 파일을 포함하는 헤더 파일

using namespace std; // 2. std 네임스페이스를 사용

int main() {
    vector<int> v; // 3. int형 벡터 v를 선언

    for(int i = 1; i <= 5; i++) {
        v.push_back(i); // 4. 벡터 v에 i를 추가
        v.push_back(i); // 5. 벡터 v에 i를 다시 추가 (중복 요소 생성)
    }

    for(int i : v) {
        cout << i << " "; // 6. 벡터 v의 모든 요소를 공백으로 구분하여 출력
    }
    cout << '\n';

    auto it = unique(v.begin(), v.end()); // 7. 중복되지 않은 요소로 벡터를 재정렬하고, 중복된 요소들을 맨 뒤로 보낸 후, 중복이 끝나는 다음 위치를 반환
    cout << it - v.begin() << '\n'; // 8. unique() 함수에 의해 중복이 끝나는 다음 위치의 이터레이터와 벡터의 시작 위치를 뺀 결과를 출력 (중복이 끝나는 위치의 인덱스)

    for(int i : v) {
        cout << i << " "; // 9. 중복이 끝나는 위치 이후의 요소들은 그대로 출력
    }
    cout << '\n';

    return 0;
}

/*
	1. <bits/stdc++.h> 헤더 파일을 포함하여 C++ 표준 라이브러리의 모든 헤더 파일을 가져옵니다.
	2. std 네임스페이스를 사용합니다.
	3. int형 벡터 v를 선언합니다.
	4/5. 1부터 5까지 반복하는 for 루프에서, v에 i를 두 번씩 추가합니다. 따라서 중복된 요소가 생성됩니다.
	6. v의 모든 요소를 출력합니다. 출력 결과는 1 1 2 2 3 3 4 4 5 5입니다.
	7. unique 함수를 사용하여 벡터 v를 재정렬합니다. 이 함수는 중복되지 않은 요소로 벡터를 재배열하고 중복된 요소들을 맨 뒤로 보내며, 중복이 끝나는 다음 위치의 이터레이터를 반환합니다.
	8. unique 함수의 반환값에서 v의 시작 위치를 뺀 값을 출력하여 중복이 끝나는 위치의 인덱스를 표시합니다. 출력 결과는 5입니다.
	9. v의 모든 요소를 출력합니다. 중복이 끝나는 위치 이후의 요소들은 그대로 출력됩니다. 출력 결과는 1 2 3 4 5 3 4 4 5 5입니다.
	10. 프로그램을 종료합니다.
*/
